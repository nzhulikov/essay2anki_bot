from functools import partial
import os
import re
import openai
import telebot
import json
import tempfile
import logging
from hashlib import sha256
from telebot.types import (
    ReplyParameters, Message,MenuButtonCommands, BotCommand,
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    Update, BotCommandScopeChat)
from telebot.util import antiflood

from anki.collection import Collection, AddNoteRequest, ExportAnkiPackageOptions, DeckIdLimit

logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_TOKEN = os.getenv("ESSAY2ANKI_BOT_KEY")
OPENAI_API_KEY = os.getenv("ESSAY2ANKI_OPENAI_KEY")

# Initialize APIs
logger.info("Initializing Telegram bot and OpenAI client...")
bot = telebot.TeleBot(TELEGRAM_TOKEN)
client = openai.OpenAI(api_key=OPENAI_API_KEY)
available_languages = {
    "gr": "–≥—Ä–µ—á–µ—Å–∫–∏–π",
    "sb": "—Å–µ—Ä–±—Å–∫–∏–π",
    "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π",
    "nl": "–Ω–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–∏–π",
}
language_flag_emojis = {
    "gr": "üá¨üá∑",
    "sb": "üá∑üá∏",
    "en": "üá¨üáß",
    "nl": "üá≥üá±",
}
available_genders = {
    "male": "–ú—É–∂—Å–∫–æ–π",
    "female": "–ñ–µ–Ω—Å–∫–∏–π",
}
gender_to_voices_map = {
    "male": ["ash", "echo"],
    "female": ["coral", "nova"]
}
voice_to_gender_map = {voice: gender for gender,voices in gender_to_voices_map.items() for voice in voices}
available_voices = {
    "ash": "–ë–∞—Ä—Ö–∞—Ç–Ω—ã–π, –Ω–∏–∑–∫–∏–π",
    "echo": "–ü—Ä–∏—è—Ç–Ω—ã–π, –º—è–≥–∫–∏–π",
    "coral": "–¢–∏—Ö–∏–π, —Å–ø–æ–∫–æ–π–Ω—ã–π",
    "nova": "–î–µ–ª–æ–≤–æ–π, —á–∏—Å—Ç—ã–π"
}

DEFAULT_LANGUAGE = "gr"
DEFAULT_ANKI = False
DEFAULT_VOICE = "ash"
DEFAULT_INSTRUCTIONS = "—Å–ø–æ–∫–æ–π–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ"


def handle_error(input: Message | CallbackQuery, e: Exception):
    logger.error(f"Error handling message: {e}", exc_info=True)
    if isinstance(input, CallbackQuery):
        bot.edit_message_text(chat_id=input.message.chat.id, message_id=input.message.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        bot.send_message(input.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def handle_error_decorator(func):
    def wrapper(message_or_callback: Message | CallbackQuery):
        try:
            return func(message_or_callback)
        except Exception as e:
            handle_error(message_or_callback, e)
    return wrapper


def translate_text(text, settings):
    """Uses ChatGPT to translate and structure text into standard Greek while keeping original phrases."""
    prompt = (
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π {available_languages[settings['language']]} —è–∑—ã–∫ "
        "—Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ—Ä–º, —Å–æ—Ö—Ä–∞–Ω—è—è "
        "–∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ª–µ–∫—Å–∏–∫–∏. "
        "–û—Ç–≤–µ—Ç —Å–¥–µ–ª–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
        "–†–∞–∑–±–µ–π –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç—Ä—ã–≤–∫–∏ 1-2 –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω–æ "
        "—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ª—ë–≥–∫–æ—Å—Ç–∏ –∑–∞—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∏–∑—É—Å—Ç—å. "
        "–î–æ–±–∞–≤—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è tts –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω —á–∏—Ç–∞–ª —Ç–µ–∫—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ "
        "–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—è —Å–º—ã—Å–ª—É –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —é–º–æ—Ä, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –≤–µ—Å—ë–ª—ã–º."
        "–ò–ª–∏ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —á—É–≤—Å—Ç–≤–∞, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ä–∞–¥–æ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ –≥—Ä—É—Å—Ç–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –æ–ø–∞—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å —Å–ø–æ–∫–æ–π–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."
        f"–ü–æ–ª –∞–≤—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {settings['gender']}"
        "–°—Ç—Ä–æ–≥–æ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .csv —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º ; –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ Anki:\n"
        "–æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞;–ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–π –æ—Ç—Ä—ã–≤–æ–∫;–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è tts –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "\"–≠—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö –æ—Ç—Ä—ã–≤–∫–æ–≤.\". –û—Ç–≤–µ—Ç:\n"
        "–≠—Ç–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞;ŒëœÖœÑœå ŒµŒØŒΩŒ±Œπ œÑŒø Œ∫ŒµŒØŒºŒµŒΩŒø Œ≥ŒπŒ± ŒºŒµœÑŒ¨œÜœÅŒ±œÉŒ∑;—Å–ø–æ–∫–æ–π–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.\n"
        "–Ø –±—ã–ª —Ç–∞–∫ –Ω–∞–ø—É–≥–∞–Ω;I was so scared;—Ç—Ä–µ–≤–æ–∂–Ω–æ, –Ω–∞–ø—É–≥–∞–Ω–Ω–æ.\n"
        f"–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n{text}"
    ) if settings["anki"] else (
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π {available_languages[settings['language']]} —è–∑—ã–∫ "
        "—Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º –≤—Å–µ—Ö –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–æ—Ä–º, —Å–æ—Ö—Ä–∞–Ω—è—è "
        "–∏—Å—Ö–æ–¥–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –ª–µ–∫—Å–∏–∫–∏. "
        "–û—Ç–≤–µ—Ç —Å–¥–µ–ª–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. "
        "–í —Å–∫–æ–±–∫–∞—Ö –Ω–∞–ø–∏—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è tts –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω —á–∏—Ç–∞–ª —Ç–µ–∫—Å—Ç —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–º."
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —é–º–æ—Ä, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –≤–µ—Å—ë–ª—ã–º."
        "–ò–ª–∏ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å —Å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —á—É–≤—Å—Ç–≤–∞, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ä–∞–¥–æ—Å—Ç–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ –¥–∏–Ω–∞–º–∏—á–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ –≥—Ä—É—Å—Ç–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –æ–ø–∞—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å –±–æ–ª–µ–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã–º."
        "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, —Ç–æ –¥–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–¥–µ–ª–∞—Ç—å –≥–æ–ª–æ—Å —Å–ø–æ–∫–æ–π–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º."
        f"–ü–æ–ª –∞–≤—Ç–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {settings['gender']}"
        "–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        "\"–Ø –±—ã–ª —Ç–∞–∫ –Ω–∞–ø—É–≥–∞–Ω. –≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ–ª—ë—Ç.\" -> \"(–≤—Å—Ç—Ä–µ–≤–æ–∂–µ–Ω–Ω–æ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) I was so scared. This is my first flight.\"\n"
        f"–í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n{text}"
    )
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.9
    )
    return response.choices[0].message.content


def synthesize_speech(text, instructions, filename, settings):
    """Converts text to speech using OpenAI TTS and saves as MP3."""
    response = client.audio.speech.create(
        model="gpt-4o-mini-tts",
        voice=settings["voice"],
        input=text,
        instructions=instructions
    )

    with open(filename, 'wb') as f:
        for chunk in response.iter_bytes():
            f.write(chunk)

    return filename


def save_settings(chat_dir, settings, **kwargs):
    for key, value in kwargs.items():
        settings[key] = value
    with open(f"{chat_dir}/settings.json", "w") as f:
        json.dump(settings, f)


def get_settings(chat_dir):
    settings = {"language": DEFAULT_LANGUAGE, "anki": DEFAULT_ANKI, "voice": DEFAULT_VOICE, "gender": voice_to_gender_map[DEFAULT_VOICE]}
    if not os.path.exists(f"{chat_dir}/settings.json"):
        with open(f"{chat_dir}/settings.json", "w") as f:
            json.dump(settings, f)
    else:
        with open(f"{chat_dir}/settings.json", "r") as f:
            settings = {**settings, **json.load(f)}  
        if settings["language"] not in available_languages:
            settings["language"] = DEFAULT_LANGUAGE
        if settings["voice"] not in available_voices:
            settings["voice"] = DEFAULT_VOICE
        if settings["gender"] not in available_genders:
            settings["gender"] = voice_to_gender_map[settings["voice"]]
        if settings["anki"] not in [True, False]:
            settings["anki"] = DEFAULT_ANKI
    return settings


def handle_webhook(message: dict):
    try:
        bot.process_new_updates([Update.de_json(message)])
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        raise e


def health_check():
    user = antiflood(bot.get_me)
    return user is not None


def init_bot(webhook_url):
    logger.info(f"Setting webhook URL: {webhook_url}")
    path_to_ssl_certificate = os.path.join(os.path.dirname(__file__), "ssl_certificate.pem")
    bot.set_webhook(url=webhook_url + "/webhook",
                    certificate=path_to_ssl_certificate,
                    secret_token=os.getenv("ESSAY2ANKI_SECRET_TOKEN"))
    init_commands()


def init_commands(chat_id: int | None = None):
    bot.set_chat_menu_button(
        chat_id=chat_id,
        menu_button=MenuButtonCommands(type="commands")
    )
    bot.set_my_commands(
        commands=[
            BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
            BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
            BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"),
        ],
        scope=BotCommandScopeChat(chat_id=chat_id) if chat_id else None
    )


def show_settings(chat_id: int, edit_message_id: int | None = None):
    chat_dir = get_chat_dir(chat_id)
    settings = get_settings(chat_dir)
    sentences = []
    if settings["anki"]:
        sentences.append("*–†–µ–∂–∏–º:* Anki")
        mode_btn = InlineKeyboardButton(text="–í–∫–ª. –ß–∞—Ç", callback_data="chat")
    else:
        sentences.append("*–†–µ–∂–∏–º:* –ß–∞—Ç")
        mode_btn = InlineKeyboardButton(text="–í–∫–ª. Anki", callback_data="anki")
    sentences.append(f"*–Ø–∑—ã–∫:* {available_languages[settings['language']]}")
    sentences.append(f"*{available_genders[settings['gender']]} –≥–æ–ª–æ—Å:* {available_voices[settings['voice']]}")
    text = '\n'.join(sentences)
    if edit_message_id:
        func = partial(bot.edit_message_text, text, chat_id=chat_id, message_id=edit_message_id)
    else:
        func = partial(bot.send_message, chat_id, text)
    func(
        reply_markup=InlineKeyboardMarkup(
            keyboard=[
                [mode_btn, InlineKeyboardButton(text="–Ø–∑—ã–∫", callback_data="lang"),  InlineKeyboardButton(text="–ì–æ–ª–æ—Å", callback_data="voice")]
            ]
        ),
        parse_mode="Markdown"
    )


def get_chat_dir(chat_id: int):
    chat_dir = f"chats/{str(chat_id)}"
    if not os.path.exists(chat_dir):
        os.makedirs(chat_dir)
    return chat_dir


@bot.message_handler(commands=["start"])
@handle_error_decorator
def handle_start(message: Message):
    chat_dir = get_chat_dir(message.chat.id)
    for file in os.listdir(chat_dir):
        os.remove(f"{chat_dir}/{file}")
    init_commands(message.chat.id)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –∏ –æ–∑–≤—É—á—É. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤.")


@bot.message_handler(commands=["settings"])
@handle_error_decorator
def handle_settings(message: Message):
    show_settings(message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in available_voices)
@handle_error_decorator
def handle_voice_callback(call: CallbackQuery):
    chat_dir = get_chat_dir(call.message.chat.id)
    settings = get_settings(chat_dir)
    save_settings(chat_dir, settings, voice=call.data, gender=voice_to_gender_map[call.data])
    show_settings(call.message.chat.id, call.message.id)


@bot.callback_query_handler(func=lambda call: call.data in available_genders)
@handle_error_decorator
def handle_gender_callback(call: CallbackQuery):
    voices = gender_to_voices_map[call.data]
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å",
                              reply_markup=InlineKeyboardMarkup(
                                keyboard=[
                                    [InlineKeyboardButton(text=available_voices[voice], callback_data=voice) for voice in voices],
                                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
                                ]
                              ))



@bot.callback_query_handler(func=lambda call: call.data in ["back_to_settings"])
@handle_error_decorator
def handle_back_to_settings_callback(call: CallbackQuery):
    show_settings(call.message.chat.id, call.message.id)


@bot.callback_query_handler(func=lambda call: call.data in ["anki", "chat", "lang", "voice"])
@handle_error_decorator
def handle_settings_callback(call: CallbackQuery):
    chat_dir = get_chat_dir(call.message.chat.id)
    settings = get_settings(chat_dir)
    if call.data == "anki":
        save_settings(chat_dir, settings, anki=True)
        show_settings(call.message.chat.id, call.message.id)
    elif call.data == "chat":
        save_settings(chat_dir, settings, anki=False)
        show_settings(call.message.chat.id, call.message.id)
    elif call.data == "lang":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞",
                              reply_markup=InlineKeyboardMarkup(
                                keyboard=[
                                    [InlineKeyboardButton(text=language_flag_emojis[language], callback_data=language) for language in available_languages.keys()],
                                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
                                ]
                              ))
    elif call.data == "voice":
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª",
                              reply_markup=InlineKeyboardMarkup(
                                keyboard=[
                                    [InlineKeyboardButton(text=gender_name, callback_data=gender) for gender, gender_name in available_genders.items()],
                                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_settings")]
                                ]
                              ))

@bot.callback_query_handler(func=lambda call: call.data in available_languages)
@handle_error_decorator
def handle_lang_callback(call: CallbackQuery):
    chat_dir = get_chat_dir(call.message.chat.id)
    settings = get_settings(chat_dir)
    save_settings(chat_dir, settings, language=call.data)
    show_settings(call.message.chat.id, call.message.id)


@bot.message_handler(commands=["help"])
@handle_error_decorator
def handle_help(message: Message):
    commands = bot.get_my_commands()
    sentences = [
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –∏ –æ–∑–≤—É—á—É. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤.",
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:",
        *[f"/{command.command} - {command.description}" for command in commands]
    ]
    bot.send_message(message.chat.id, '\n'.join(sentences))


@bot.message_handler()
@handle_error_decorator
def handle_message(message: Message):
    if message.text.startswith("/"):
        handle_help(message)
        return
    if len(message.text) > 5000:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –º–µ–Ω—å—à–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    if len(message.text) < 10:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ø—Ä–æ–±—É–π –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        return

    chat_dir = get_chat_dir(message.chat.id)
    settings = get_settings(chat_dir)

    with tempfile.TemporaryDirectory() as tmpdir:
        bot.send_chat_action(message.chat.id, "typing")
        translated_text = translate_text(message.text, settings)
        if len(translated_text) > 7000:
            bot.send_message("–ü–æ–ª—É—á–∏–ª—Å—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", message.chat.id)
            return
        if not settings["anki"]:
            # strip instructions from translated text in brackets
            instructions = re.search(r'\((.*?)\)', translated_text)
            if instructions:
                instructions = instructions.group(1)
                translated_text = re.sub(r'\((.*?)\)', '', translated_text)
            else:
                instructions = DEFAULT_INSTRUCTIONS    
            bot.send_message(message.chat.id, translated_text, reply_parameters=ReplyParameters(message.id, allow_sending_without_reply=True))
            bot.send_chat_action(message.chat.id, "record_voice")
            audio_filename = os.path.join(tmpdir, f"audio_{sha256(translated_text.encode()).hexdigest()}.mp3")
            synthesize_speech(translated_text, instructions, audio_filename, settings)
            with open(audio_filename, "rb") as audio:
                bot.send_voice(message.chat.id, audio,
                    reply_parameters=ReplyParameters(message.id, allow_sending_without_reply=True))
            return
        
        lines = translated_text.strip().split("\n")
        lines = [line for line in lines if ';' in line]

        if not lines:
            bot.send_message("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", message.chat.id)
            return

        translated_text = '\n'.join([f"*{line.split(';')[0]}* | {line.split(';')[1]}" for line in lines])
        bot.send_message(message.chat.id, translated_text,
            reply_parameters=ReplyParameters(message.id, allow_sending_without_reply=True),
            parse_mode="Markdown")

        deck_name = lines[0].split(";")[0].strip()
        anki_package_filename = os.path.join(tmpdir, "deck.apkg")
        collection = Collection(os.path.join(tmpdir, "collection.anki2"))
        try:
            deck_id = collection.decks.add_normal_deck_with_name(deck_name).id
            collection.decks.set_current(deck_id)
            add_note_requests = []
            for i in range(0, len(lines)):
                bot.send_chat_action(message.chat.id, "upload_document")
                original = lines[i].split(";")[0].strip()
                translated = lines[i].split(";")[1].strip()
                instructions = lines[i].split(";")[2].strip()
                mp3_filename = f"phrase_{len(add_note_requests)+1}_{sha256(translated.encode()).hexdigest()}.mp3"
                mp3_filename_path = os.path.join(tmpdir, mp3_filename)

                synthesize_speech(translated, instructions, mp3_filename_path, settings)
                mp3_filename = collection.media.add_file(mp3_filename_path)
                note = collection.new_note(collection.models.by_name("Basic"))
                note.fields = [original, f"{translated}[sound:{mp3_filename}]"]
                note.tags = ["—ç—Å—Å–µ"]
                add_note_requests.append(AddNoteRequest(note=note, deck_id=deck_id))
            
            collection.add_notes(add_note_requests)
            collection.export_anki_package(
                out_path=anki_package_filename,
                options=ExportAnkiPackageOptions(
                    with_media=True,
                    legacy=True
                ),
                limit=DeckIdLimit(
                    deck_id=deck_id
                )
            )
        finally:
            collection.close()

        bot.send_chat_action(message.chat.id, "upload_document")
        with open(anki_package_filename, "rb") as zipf:
            bot.send_document(message.chat.id, zipf,  
                            reply_parameters=ReplyParameters(message.id, allow_sending_without_reply=True))
